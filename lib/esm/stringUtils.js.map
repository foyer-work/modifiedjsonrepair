{"version":3,"file":"stringUtils.js","names":["codeBackslash","codeSlash","codeAsterisk","codeOpeningBrace","codeClosingBrace","codeOpeningBracket","codeClosingBracket","codeOpenParenthesis","codeCloseParenthesis","codeSpace","codeNewline","codeTab","codeReturn","codeBackspace","codeFormFeed","codeDoubleQuote","codePlus","codeMinus","codeQuote","codeZero","codeOne","codeNine","codeComma","codeDot","codeColon","codeSemicolon","codeUppercaseA","codeLowercaseA","codeUppercaseE","codeLowercaseE","codeUppercaseF","codeLowercaseF","codeNonBreakingSpace","codeEnQuad","codeHairSpace","codeNarrowNoBreakSpace","codeMediumMathematicalSpace","codeIdeographicSpace","codeDoubleQuoteLeft","codeDoubleQuoteRight","codeQuoteLeft","codeQuoteRight","codeGraveAccent","codeAcuteAccent","isHex","code","isDigit","isNonZeroDigit","isValidStringCharacter","isDelimiter","char","regexDelimiter","test","isQuote","charCodeAt","isStartOfValue","regexStartOfValue","isControlCharacter","isWhitespace","isSpecialWhitespace","isDoubleQuote","isSingleQuote","stripLastOccurrence","text","textToStrip","stripRemainingText","index","lastIndexOf","substring","insertBeforeLastWhitespace","textToInsert","length","removeAtIndex","start","count","endsWithCommaOrNewline"],"sources":["../../src/stringUtils.ts"],"sourcesContent":["// TODO: sort the codes\r\nexport const codeBackslash = 0x5c // \"\\\"\r\nexport const codeSlash = 0x2f // \"/\"\r\nexport const codeAsterisk = 0x2a // \"*\"\r\nexport const codeOpeningBrace = 0x7b // \"{\"\r\nexport const codeClosingBrace = 0x7d // \"}\"\r\nexport const codeOpeningBracket = 0x5b // \"[\"\r\nexport const codeClosingBracket = 0x5d // \"]\"\r\nexport const codeOpenParenthesis = 0x28 // \"(\"\r\nexport const codeCloseParenthesis = 0x29 // \")\"\r\nexport const codeSpace = 0x20 // \" \"\r\nexport const codeNewline = 0xa // \"\\n\"\r\nexport const codeTab = 0x9 // \"\\t\"\r\nexport const codeReturn = 0xd // \"\\r\"\r\nexport const codeBackspace = 0x08 // \"\\b\"\r\nexport const codeFormFeed = 0x0c // \"\\f\"\r\nexport const codeDoubleQuote = 0x0022 // \"\r\nexport const codePlus = 0x2b // \"+\"\r\nexport const codeMinus = 0x2d // \"-\"\r\nexport const codeQuote = 0x27 // \"'\"\r\nexport const codeZero = 0x30\r\nexport const codeOne = 0x31\r\nexport const codeNine = 0x39\r\nexport const codeComma = 0x2c // \",\"\r\nexport const codeDot = 0x2e // \".\" (dot, period)\r\nexport const codeColon = 0x3a // \":\"\r\nexport const codeSemicolon = 0x3b // \";\"\r\nexport const codeUppercaseA = 0x41 // \"A\"\r\nexport const codeLowercaseA = 0x61 // \"a\"\r\nexport const codeUppercaseE = 0x45 // \"E\"\r\nexport const codeLowercaseE = 0x65 // \"e\"\r\nexport const codeUppercaseF = 0x46 // \"F\"\r\nexport const codeLowercaseF = 0x66 // \"f\"\r\nconst codeNonBreakingSpace = 0xa0\r\nconst codeEnQuad = 0x2000\r\nconst codeHairSpace = 0x200a\r\nconst codeNarrowNoBreakSpace = 0x202f\r\nconst codeMediumMathematicalSpace = 0x205f\r\nconst codeIdeographicSpace = 0x3000\r\nconst codeDoubleQuoteLeft = 0x201c // “\r\nconst codeDoubleQuoteRight = 0x201d // ”\r\nconst codeQuoteLeft = 0x2018 // ‘\r\nconst codeQuoteRight = 0x2019 // ’\r\nconst codeGraveAccent = 0x0060 // `\r\nconst codeAcuteAccent = 0x00b4 // ´\r\n\r\nexport function isHex(code: number): boolean {\r\n  return (\r\n    (code >= codeZero && code <= codeNine) ||\r\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\r\n    (code >= codeLowercaseA && code <= codeLowercaseF)\r\n  )\r\n}\r\n\r\nexport function isDigit(code: number): boolean {\r\n  return code >= codeZero && code <= codeNine\r\n}\r\n\r\nexport function isNonZeroDigit(code: number): boolean {\r\n  return code >= codeOne && code <= codeNine\r\n}\r\n\r\nexport function isValidStringCharacter(code: number): boolean {\r\n  return code >= 0x20 && code <= 0x10ffff\r\n}\r\n\r\nexport function isDelimiter(char: string): boolean {\r\n  return regexDelimiter.test(char) || (char && isQuote(char.charCodeAt(0)))\r\n}\r\n\r\nconst regexDelimiter = /^[,:[\\]{}()\\n]$/\r\n\r\nexport function isStartOfValue(char: string): boolean {\r\n  return regexStartOfValue.test(char) || (char && isQuote(char.charCodeAt(0)))\r\n}\r\n\r\n// alpha, number, minus, or opening bracket or brace\r\nconst regexStartOfValue = /^[[{\\w-]$/\r\n\r\nexport function isControlCharacter(code: number) {\r\n  return (\r\n    code === codeNewline ||\r\n    code === codeReturn ||\r\n    code === codeTab ||\r\n    code === codeBackspace ||\r\n    code === codeFormFeed\r\n  )\r\n}\r\n\r\n/**\r\n * Check if the given character is a whitespace character like space, tab, or\r\n * newline\r\n */\r\nexport function isWhitespace(code: number): boolean {\r\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\r\n}\r\n\r\n/**\r\n * Check if the given character is a special whitespace character, some\r\n * unicode variant\r\n */\r\nexport function isSpecialWhitespace(code: number): boolean {\r\n  return (\r\n    code === codeNonBreakingSpace ||\r\n    (code >= codeEnQuad && code <= codeHairSpace) ||\r\n    code === codeNarrowNoBreakSpace ||\r\n    code === codeMediumMathematicalSpace ||\r\n    code === codeIdeographicSpace\r\n  )\r\n}\r\n\r\n/**\r\n * Test whether the given character is a quote or double quote character.\r\n * Also tests for special variants of quotes.\r\n */\r\nexport function isQuote(code: number): boolean {\r\n  // the first check double quotes, since that occurs most often\r\n  return isDoubleQuote(code) || isSingleQuote(code)\r\n}\r\n\r\n/**\r\n * Test whether the given character is a double quote character.\r\n * Also tests for special variants of double quotes.\r\n */\r\nexport function isDoubleQuote(code: number): boolean {\r\n  // the first check double quotes, since that occurs most often\r\n  return code === codeDoubleQuote || code === codeDoubleQuoteLeft || code === codeDoubleQuoteRight\r\n}\r\n\r\n/**\r\n * Test whether the given character is a single quote character.\r\n * Also tests for special variants of single quotes.\r\n */\r\nexport function isSingleQuote(code: number): boolean {\r\n  return (\r\n    code === codeQuote ||\r\n    code === codeQuoteLeft ||\r\n    code === codeQuoteRight ||\r\n    code === codeGraveAccent ||\r\n    code === codeAcuteAccent\r\n  )\r\n}\r\n\r\n/**\r\n * Strip last occurrence of textToStrip from text\r\n */\r\nexport function stripLastOccurrence(\r\n  text: string,\r\n  textToStrip: string,\r\n  stripRemainingText = false\r\n): string {\r\n  const index = text.lastIndexOf(textToStrip)\r\n  return index !== -1\r\n    ? text.substring(0, index) + (stripRemainingText ? '' : text.substring(index + 1))\r\n    : text\r\n}\r\n\r\nexport function insertBeforeLastWhitespace(text: string, textToInsert: string): string {\r\n  let index = text.length\r\n\r\n  if (!isWhitespace(text.charCodeAt(index - 1))) {\r\n    // no trailing whitespaces\r\n    return text + textToInsert\r\n  }\r\n\r\n  while (isWhitespace(text.charCodeAt(index - 1))) {\r\n    index--\r\n  }\r\n\r\n  return text.substring(0, index) + textToInsert + text.substring(index)\r\n}\r\n\r\nexport function removeAtIndex(text: string, start: number, count: number) {\r\n  return text.substring(0, start) + text.substring(start + count)\r\n}\r\n\r\n/**\r\n * Test whether a string ends with a newline or comma character and optional whitespace\r\n */\r\nexport function endsWithCommaOrNewline(text: string): boolean {\r\n  return /[,\\n][ \\t\\r]*$/.test(text)\r\n}\r\n"],"mappings":"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"}